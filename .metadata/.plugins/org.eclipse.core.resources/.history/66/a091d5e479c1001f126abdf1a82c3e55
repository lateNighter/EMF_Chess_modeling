package chessmodelplugin;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.IOException;

import chess.ChessFactory;
import chess.Game;
import chess.Player;
import chess.PlayerColor;
import chess.Board;
import chess.Square;
import chess.SquareColor;
import chess.Piece;
import chess.King;
import chess.Queen;
import chess.Rook;
import chess.SpecialMoves;
import chess.Bishop;
import chess.Knight;
import chess.Pawn;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;

import chess.Board;

public class ChessModelUtil {

	public static Game createFirstChessGame() {
		// Create Players
        Player whitePlayer = createPlayer("White Player", PlayerColor.WHITE);
        Player blackPlayer = createPlayer("Black Player", PlayerColor.BLACK);
        
        // Create Board
        Board board = createBoard();
        
        // Create Special Moves
        SpecialMoves specialMoves = createSpecialMoves();
        
        // Create Game instance
        Game game = ChessFactory.eINSTANCE.createGame();
        game.setState("Started");
        game.setTurn(PlayerColor.WHITE); // White starts
        game.getPlayers().add(whitePlayer);
        game.getPlayers().add(blackPlayer);
        game.setBoard(board);
        game.setSpecialMoves(specialMoves);
        
        return game;
    }

    private static Player createPlayer(String name, PlayerColor color) {
        Player player = ChessFactory.eINSTANCE.createPlayer();
        player.setName(name);
        player.setColor(color);
        return player;
    }

    private static Board createBoard() {
        Board board = ChessFactory.eINSTANCE.createBoard();
        board.setRows(8);
        board.setColumns(8);
        createSquares(board);
        return board;
    }

    private static void createSquares(Board board) {
        for (int i = 0; i < 64; i++) {
            Square square = ChessFactory.eINSTANCE.createSquare();
            square.setFile(String.valueOf((char) ('A' + i % 8)));
            square.setRank(i / 8 + 1);
            square.setColor(i % 2 == 0 ? SquareColor.WHITE : SquareColor.BLACK);
            
            // Assuming squares is a List or EList, we can add directly
            board.getSquares().add(square);
        }
    }
    
    private static SpecialMoves createSpecialMoves() {
        SpecialMoves specialMoves = ChessFactory.eINSTANCE.createSpecialMoves();
        specialMoves.setCastleQueensideWhite(false);
        specialMoves.setCastleQueensideBlack(false);
        specialMoves.setCastleKingsideWhite(false);
        specialMoves.setCastleKingsideBlack(false);
        return specialMoves;
    }
	
//        ChessFactory factory = ChessFactory.eINSTANCE;
//
//        Game game = factory.createGame();
//        game.setState("ongoing");
//        game.setTurn(PlayerColor.WHITE);
//
//        // Create players
//        Player player1 = factory.createPlayer();
//        player1.setName("Player 1");
//        player1.setColor(PlayerColor.WHITE);
//
//        Player player2 = factory.createPlayer();
//        player2.setName("Player 2");
//        player2.setColor(PlayerColor.BLACK);
//
//        game.getPlayers().add(player1);
//        game.getPlayers().add(player2);
//
//        // Create the board
//        Board board = factory.createBoard();
//        board.setRows(8);
//        board.setColumns(8);
//        game.setBoard(board);
//
//        // Add squares and pieces
//        addPiecesToBoard(factory, board, player1, player2);
//
//        return game;
//    }
//
//    // Create the second chess game instance
//    public static Game createSecondChessGame() {
//        ChessFactory factory = ChessFactory.eINSTANCE;
//
//        Game game = factory.createGame();
//        game.setState("ongoing");
//        game.setTurn(PlayerColor.BLACK);
//
//        // Create players
//        Player player3 = factory.createPlayer();
//        player3.setName("Player 3");
//        player3.setColor(PlayerColor.WHITE);
//
//        Player player4 = factory.createPlayer();
//        player4.setName("Player 4");
//        player4.setColor(PlayerColor.BLACK);
//
//        game.getPlayers().add(player3);
//        game.getPlayers().add(player4);
//
//        // Create the board
//        Board board = factory.createBoard();
//        board.setRows(8);
//        board.setColumns(8);
//        game.setBoard(board);
//
//        // Add squares and pieces
//        addPiecesToBoard(factory, board, player3, player4);
//
//        return game;
//    }

    // Helper method to add pieces and squares to the board
    private static void addPiecesToBoard(ChessFactory factory, Board board, Player whitePlayer, Player blackPlayer) {
        for (int row = 1; row <= 8; row++) {
            for (char file = 'a'; file <= 'h'; file++) {
                Square square = factory.createSquare();
                square.setFile(Character.toString(file));
                square.setRank(row);
                board.getSquares().add(square);  // Add the square to the board

                // Add pieces to squares based on starting positions of a chess game
                if (row == 1) { // White major pieces
                    if (file == 'e') {
                        King whiteKing = factory.createKing();
                        whiteKing.setColor(PlayerColor.WHITE);
                        whiteKing.setCurrentPosition(square);  // Set King on Square
                        square.setPiece(whiteKing);  // Add King to Square (containment)
                    } else if (file == 'd') {
                        Queen whiteQueen = factory.createQueen();
                        whiteQueen.setColor(PlayerColor.WHITE);
                        whiteQueen.setCurrentPosition(square);  // Set Queen on Square
                        square.setPiece(whiteQueen);  // Add Queen to Square (containment)
                    }
                    // Add more major pieces (Rook, Knight, Bishop)
                } else if (row == 2) { // White pawns
                    Pawn whitePawn = factory.createPawn();
                    whitePawn.setColor(PlayerColor.WHITE);
                    whitePawn.setCurrentPosition(square);  // Set Pawn on Square
                    square.setPiece(whitePawn);  // Add Pawn to Square (containment)
                } else if (row == 7) { // Black pawns
                    Pawn blackPawn = factory.createPawn();
                    blackPawn.setColor(PlayerColor.BLACK);
                    blackPawn.setCurrentPosition(square);  // Set Pawn on Square
                    square.setPiece(blackPawn);  // Add Pawn to Square (containment)
                } else if (row == 8) { // Black major pieces
                    if (file == 'e') {
                        King blackKing = factory.createKing();
                        blackKing.setColor(PlayerColor.BLACK);
                        blackKing.setCurrentPosition(square);  // Set King on Square
                        square.setPiece(blackKing);  // Add King to Square (containment)
                    } else if (file == 'd') {
                        Queen blackQueen = factory.createQueen();
                        blackQueen.setColor(PlayerColor.BLACK);
                        blackQueen.setCurrentPosition(square);  // Set Queen on Square
                        square.setPiece(blackQueen);  // Add Queen to Square (containment)
                    }
                    // Add more major pieces (Rook, Knight, Bishop)
                }
            }
        }
    }






    
    public static void serializeModel(Game game, String filePath) {
        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();
        m.put("xmi", new XMIResourceFactoryImpl());

        ResourceSet resSet = new ResourceSetImpl();
        URI fileURI = URI.createFileURI(filePath);

        Resource resource = resSet.createResource(fileURI);
        resource.getContents().add(game);  // Ensure Game is added to the resource

        // Collect all squares and pieces to add them correctly to the resource
        List<EObject> objectsToAdd = new ArrayList<>();

        Board board = game.getBoard();
        if (board != null) {
            // Add board to the resource
            objectsToAdd.add(board);

            // Collect all squares and their pieces
            for (Square square : board.getSquares()) {
                objectsToAdd.add(square);  // Add each Square

                // Add the piece to the square and also add it to the resource
                if (square.getPiece() != null) {
                    // Set the current position of the piece to the square
                    square.getPiece().setCurrentPosition(square);  
                    objectsToAdd.add(square.getPiece());  // Add each Piece to the resource
                }
            }
        }

        // After iterating, add everything to the resource
        resource.getContents().addAll(objectsToAdd);

        try {
            resource.save(new HashMap<>());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }









    
    public static Game loadModel(String filePath) {
        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();
        m.put("xmi", new XMIResourceFactoryImpl());

        ResourceSet resSet = new ResourceSetImpl();

        URI fileURI = URI.createFileURI(filePath);

        Resource resource = resSet.getResource(fileURI, true);

        return (Game) resource.getContents().get(0);
    }
    
    public static boolean validateModel(Game game) {
        if (game.getPlayers().size() != 2) {
            System.out.println("Validation failed: Game must have exactly two players.");
            return false;
        }

        Board board = game.getBoard();
        if (board == null || board.getRows() != 8 || board.getColumns() != 8) {
            System.out.println("Validation failed: Game must have an 8x8 board.");
            return false;
        }

        // Validate each square's piece (if any)
        for (Square square : board.getSquares()) {
            if (square.getPiece() != null) {
                // Validate the piece (optional, depending on your game rules)
                if (square.getPiece().getColor() == null) {
                    System.out.println("Validation failed: Piece must have a color.");
                    return false;
                }
            }
        }

        System.out.println("Model is valid.");
        return true;
    }

    
    
}


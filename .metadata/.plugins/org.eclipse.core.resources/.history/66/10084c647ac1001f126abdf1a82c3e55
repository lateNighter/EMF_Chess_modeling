package chessmodelplugin;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;

import chess.Game;

import java.io.File;
import java.io.IOException;

public class SaveModelHandler extends AbstractHandler {

    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {
        Game gameInstance = CreateModelHandler.getGameInstance();

        if (gameInstance == null) {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            MessageDialog.openError(shell, "Error", "No chess model to save. Please create a model first.");
            return null;
        }

        Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
        
        // Open a Save dialog for the user to choose where to save the file
        FileDialog dialog = new FileDialog(shell, SWT.SAVE);
        dialog.setFilterExtensions(new String[] { "*.xmi", "*.*" });
        dialog.setFilterNames(new String[] { "XMI Files (*.xmi)", "All Files (*.*)" });
        dialog.setFileName("chessGameInstance.xmi");
        
        String filePath = dialog.open();
        
        if (filePath != null) {
            File file = new File(filePath);
            
            try {
                ChessModelUtil.saveModel(gameInstance, file);
                MessageDialog.openInformation(shell, "Chess Model", "Model saved successfully to " + file.getAbsolutePath());
            } catch (IOException e) {
                throw new ExecutionException("Error saving model", e);
            }
        } else {
            MessageDialog.openInformation(shell, "Save Cancelled", "Save operation was cancelled.");
        }

        return null;
    }
}


//package chessmodelplugin;
//
//import org.eclipse.core.commands.AbstractHandler;
//import org.eclipse.core.commands.ExecutionEvent;
//import org.eclipse.core.commands.ExecutionException;
//import org.eclipse.jface.dialogs.MessageDialog;
//import chess.Game;
//import org.eclipse.swt.SWT;
//import org.eclipse.swt.widgets.FileDialog;
//import org.eclipse.swt.widgets.Shell;
//import org.eclipse.ui.PlatformUI;
//
//public class SaveModelHandler extends AbstractHandler {
//
//    private static Game gameInstance; 
//
//    @Override
//    public Object execute(ExecutionEvent event) throws ExecutionException {
//        Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
//
//        if (gameInstance == null) {
//            MessageDialog.openError(shell, "Error", "No chess game instance available to save.");
//            return null;
//        }
//
//        FileDialog fileDialog = new FileDialog(shell, SWT.SAVE); 
//        fileDialog.setText("Save Chess Model");
//        fileDialog.setFilterExtensions(new String[] { "*.xmi" });
//        fileDialog.setFileName("chessgame.xmi");  
//
//        String selectedFile = fileDialog.open();
//
//        if (selectedFile != null && !selectedFile.isEmpty()) {
//            if (!selectedFile.endsWith(".xmi")) {
//                selectedFile += ".xmi";
//            }
//            
//            ChessModelUtil.serializeModel(gameInstance, selectedFile);
//            MessageDialog.openInformation(shell, "Success", "Chess game saved successfully to " + selectedFile);
//        } else {
//            MessageDialog.openError(shell, "Error", "Invalid file path. Save operation aborted.");
//        }
//
//        return null;
//    }
//
//    public static void setGameInstance(Game game) {
//        gameInstance = game;
//    }
//
//    public static Game getGameInstance() {
//        return gameInstance;
//    }
//}

package chessmodelplugin;

import chess.ChessFactory;
import chess.Game;
import chess.Player;
import chess.PlayerColor;
import chess.Board;
import chess.Square;
import chess.Piece;
import chess.King;
import chess.Queen;
import chess.Rook;
import chess.Bishop;
import chess.Knight;
import chess.Pawn;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;

import chess.Board;

public class ChessModelUtil {

	public static Game createFirstChessGame() {
        ChessFactory factory = ChessFactory.eINSTANCE;

        Game game = factory.createGame();
        game.setState("ongoing");
        game.setCurrentTurn(PlayerColor.WHITE);

        // Create players
        Player player1 = factory.createPlayer();
        player1.setName("Player 1");
        player1.setColor(PlayerColor.WHITE);

        Player player2 = factory.createPlayer();
        player2.setName("Player 2");
        player2.setColor(PlayerColor.BLACK);

        game.getPlayers().add(player1);
        game.getPlayers().add(player2);

        // Create the board
        Board board = factory.createBoard();
        board.setRows(8);
        board.setColumns(8);
        game.setBoard(board);

        // Add squares and pieces
        addPiecesToBoard(factory, board, player1, player2);

        return game;
    }

    // Create the second chess game instance
    public static Game createSecondChessGame() {
        ChessFactory factory = ChessFactory.eINSTANCE;

        Game game = factory.createGame();
        game.setState("ongoing");
        game.setCurrentTurn(PlayerColor.BLACK);

        // Create players
        Player player3 = factory.createPlayer();
        player3.setName("Player 3");
        player3.setColor(PlayerColor.WHITE);

        Player player4 = factory.createPlayer();
        player4.setName("Player 4");
        player4.setColor(PlayerColor.BLACK);

        game.getPlayers().add(player3);
        game.getPlayers().add(player4);

        // Create the board
        Board board = factory.createBoard();
        board.setRows(8);
        board.setColumns(8);
        game.setBoard(board);

        // Add squares and pieces
        addPiecesToBoard(factory, board, player3, player4);

        return game;
    }

    // Helper method to add pieces and squares to the board
    private static void addPiecesToBoard(ChessFactory factory, Board board, Player whitePlayer, Player blackPlayer) {
        for (int row = 1; row <= 8; row++) {
            for (char file = 'a'; file <= 'h'; file++) {
                Square square = factory.createSquare();
                square.setFile(Character.toString(file));
                square.setRank(row);
                board.getSquares().add(square);

                // Add some pieces to certain squares for white and black
                if (row == 1 && (file == 'e')) {
                    King king = factory.createKing();
                    king.setColor(PlayerColor.WHITE);
                    square.setPiece(king);
                } else if (row == 8 && (file == 'e')) {
                    King king = factory.createKing();
                    king.setColor(PlayerColor.BLACK);
                    square.setPiece(king);
                } else if (row == 2) {
                    Pawn pawn = factory.createPawn();
                    pawn.setColor(PlayerColor.WHITE);
                    square.setPiece(pawn);
                } else if (row == 7) {
                    Pawn pawn = factory.createPawn();
                    pawn.setColor(PlayerColor.BLACK);
                    square.setPiece(pawn);
                }
                // Add more pieces (Queen, Rook, Bishop, etc.) as needed
            }
        }
    }
    
    public static void serializeModel(Game game, String filePath) {
        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();
        m.put("xmi", new XMIResourceFactoryImpl());

        ResourceSet resSet = new ResourceSetImpl();

        URI fileURI = URI.createFileURI(filePath);

        Resource resource = resSet.createResource(fileURI);

        resource.getContents().add(game);

        try {
            resource.save(new HashMap<>());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public static Game loadModel(String filePath) {
        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();
        m.put("xmi", new XMIResourceFactoryImpl());

        ResourceSet resSet = new ResourceSetImpl();

        URI fileURI = URI.createFileURI(filePath);

        Resource resource = resSet.getResource(fileURI, true);

        return (Game) resource.getContents().get(0);
    }
    
    public static boolean validateModel(Game game) {
        if (game.getPlayers().size() != 2) {
            System.out.println("Validation failed: Game must have exactly two players.");
            return false;
        }

        Board board = game.getBoard();
        if (board == null || board.getRows() != 8 || board.getColumns() != 8) {
            System.out.println("Validation failed: Game must have an 8x8 board.");
            return false;
        }

        System.out.println("Model is valid.");
        return true;
    }
    
    
}


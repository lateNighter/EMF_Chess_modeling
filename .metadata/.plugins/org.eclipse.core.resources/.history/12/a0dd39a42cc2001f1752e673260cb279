package chessmodelplugin;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;

import chess.Bishop;
import chess.Board;
import chess.ChessFactory;
import chess.Game;
import chess.King;
import chess.Knight;
import chess.Pawn;
import chess.Piece;
import chess.Player;
import chess.PlayerColor;
import chess.Queen;
import chess.Rook;
import chess.Square;
import chess.SquareColor;

public class ChessModelUtil {

	// Method to place a piece on the board
	private static void placePiece(Board board, Piece piece, String file, int rank) {
	    Square square = findSquare(board, file, rank);
	    square.setPiece(piece);
	    piece.setCurrentPosition(square);
	}

	// Method to find a square on the board based on file and rank
	private static Square findSquare(Board board, String file, int rank) {
	    return board.getSquares().stream()
	        .filter(sq -> sq.getFile().equals(file) && sq.getRank() == rank)
	        .findFirst()
	        .orElseThrow(() -> new IllegalArgumentException("Square not found"));
	}

	// First game setup - initial chess position
	public static Game createFirstChessGame() {
	    Game game = ChessFactory.eINSTANCE.createGame();
	    game.setTurn(PlayerColor.WHITE);
	    game.getPlayers().addAll(createPlayers());
	    Board board = ChessFactory.eINSTANCE.createBoard();
	    board.setRows(8);
	    board.setColumns(8);
	    game.setBoard(board);
	    createSquares(board);
	    
	    // Place all pieces using placePiece function
	    placePiece(board, createRook(PlayerColor.WHITE), "a", 1);
	    placePiece(board, createKnight(PlayerColor.WHITE), "b", 1);
	    placePiece(board, createBishop(PlayerColor.WHITE), "c", 1);
	    placePiece(board, createQueen(PlayerColor.WHITE), "d", 1);
	    placePiece(board, createKing(PlayerColor.WHITE), "e", 1);
	    placePiece(board, createBishop(PlayerColor.WHITE), "f", 1);
	    placePiece(board, createKnight(PlayerColor.WHITE), "g", 1);
	    placePiece(board, createRook(PlayerColor.WHITE), "h", 1);

	    for (char file = 'a'; file <= 'h'; file++) {
	        placePiece(board, createPawn(PlayerColor.WHITE), String.valueOf(file), 2);
	    }

	    // Black pieces
	    placePiece(board, createRook(PlayerColor.BLACK), "a", 8);
	    placePiece(board, createKnight(PlayerColor.BLACK), "b", 8);
	    placePiece(board, createBishop(PlayerColor.BLACK), "c", 8);
	    placePiece(board, createQueen(PlayerColor.BLACK), "d", 8);
	    placePiece(board, createKing(PlayerColor.BLACK), "e", 8);
	    placePiece(board, createBishop(PlayerColor.BLACK), "f", 8);
	    placePiece(board, createKnight(PlayerColor.BLACK), "g", 8);
	    placePiece(board, createRook(PlayerColor.BLACK), "h", 8);

	    for (char file = 'a'; file <= 'h'; file++) { 
	        placePiece(board, createPawn(PlayerColor.BLACK), String.valueOf(file), 7);
	    }

	    return game;
	}

	// Second game setup - simulating the state from the image with Black kingside castling
	public static Game createSecondChessGame() {
	    Game game = ChessFactory.eINSTANCE.createGame();
	    game.setTurn(PlayerColor.WHITE);
	    game.getPlayers().addAll(createPlayers());
	    Board board = ChessFactory.eINSTANCE.createBoard();
	    board.setRows(8);
	    board.setColumns(8);
	    game.setBoard(board);
	    createSquares(board);
	    
	    // Place White pieces
	    placePiece(board, createRook(PlayerColor.WHITE), "f", 1);  // White rook has castled
	    placePiece(board, createKing(PlayerColor.WHITE), "g", 1);  // White king after castling
	    placePiece(board, createKnight(PlayerColor.WHITE), "f", 3);
	    placePiece(board, createBishop(PlayerColor.WHITE), "c", 4);
	    
	    // White pawns
	    for (char file = 'a'; file <= 'h'; file++) {
	        if (file != 'e' && file != 'g') {  // e2 and g2 are empty after castling
	            placePiece(board, createPawn(PlayerColor.WHITE), String.valueOf(file), 2);
	        }
	    }

	    // Place Black pieces
	    placePiece(board, createRook(PlayerColor.BLACK), "f", 8);  // Black rook after castling
	    placePiece(board, createKing(PlayerColor.BLACK), "g", 8);  // Black king after castling
	    placePiece(board, createBishop(PlayerColor.BLACK), "c", 5);
	    placePiece(board, createKnight(PlayerColor.BLACK), "f", 6);

	    // Black pawns
	    for (char file = 'a'; file <= 'h'; file++) {
	        if (file != 'f') {  // f7 is empty after knight move
	            placePiece(board, createPawn(PlayerColor.BLACK), String.valueOf(file), 7);
	        }
	    }

	    return game;
	}




    public static void saveModel(Game gameInstance, File file) throws IOException {
        Resource resource = new ResourceSetImpl().createResource(org.eclipse.emf.common.util.URI.createFileURI(file.getAbsolutePath()));
        resource.getContents().add(gameInstance);
        resource.save(null); // Save without additional options
    }

    public static Game loadModel(File file) throws IOException {
        Resource resource = new ResourceSetImpl().createResource(org.eclipse.emf.common.util.URI.createFileURI(file.getAbsolutePath()));
        resource.load(null); // Load without additional options
        return (Game) resource.getContents().get(0); // Assuming the first object is the game instance
    }

    public static Diagnostic validateModel(Game gameInstance) {
        // Implement validation logic, e.g., ensuring that the model conforms to constraints
        // You could use EMF's default diagnostic validation framework here
        // Returning OK for simplicity
        return org.eclipse.emf.common.util.Diagnostic.OK_INSTANCE;
    }
    
    private static List<Player> createPlayers() {
        Player whitePlayer = ChessFactory.eINSTANCE.createPlayer();
        whitePlayer.setName("White");
        whitePlayer.setColor(PlayerColor.WHITE);

        Player blackPlayer = ChessFactory.eINSTANCE.createPlayer();
        blackPlayer.setName("Black");
        blackPlayer.setColor(PlayerColor.BLACK);

        List<Player> players = new ArrayList<>();
        players.add(whitePlayer);
        players.add(blackPlayer);

        return players;
    }

    private static List<Square> createSquares(Board board) {
        List<Square> squares = new ArrayList<>();
        String[] files = {"a", "b", "c", "d", "e", "f", "g", "h"};

        for (int rank = 1; rank <= 8; rank++) {
            for (int fileIndex = 0; fileIndex < files.length; fileIndex++) {
                Square square = ChessFactory.eINSTANCE.createSquare();
                square.setFile(files[fileIndex]); // Set file as a string
                square.setRank(rank);
                square.setColor((rank + fileIndex) % 2 == 0 ? SquareColor.WHITE : SquareColor.BLACK); // alternating colors

                squares.add(square);
            }
        }
        board.getSquares().addAll(squares); // Add all squares to the board
        return squares;
    }


    
    private static Rook createRook(PlayerColor color) {
        Rook rook = ChessFactory.eINSTANCE.createRook();
        rook.setColor(color);
        return rook;
    }

    private static Knight createKnight(PlayerColor color) {
        Knight knight = ChessFactory.eINSTANCE.createKnight();
        knight.setColor(color);
        return knight;
    }

    private static Bishop createBishop(PlayerColor color) {
        Bishop bishop = ChessFactory.eINSTANCE.createBishop();
        bishop.setColor(color);
        return bishop;
    }

    private static Queen createQueen(PlayerColor color) {
        Queen queen = ChessFactory.eINSTANCE.createQueen();
        queen.setColor(color);
        return queen;
    }

    private static King createKing(PlayerColor color) {
        King king = ChessFactory.eINSTANCE.createKing();
        king.setColor(color);
        return king;
    }

    private static Pawn createPawn(PlayerColor color) {
        Pawn pawn = ChessFactory.eINSTANCE.createPawn();
        pawn.setColor(color);
        return pawn;
    }

}



//package chessmodelplugin;
//
//import java.util.List;
//import java.util.ArrayList;
//import java.util.Map;
//import java.io.IOException;
//
//import chess.ChessFactory;
//import chess.Game;
//import chess.Player;
//import chess.PlayerColor;
//import chess.Board;
//import chess.Square;
//import chess.SquareColor;
//import chess.Piece;
//import chess.King;
//import chess.Queen;
//import chess.Rook;
//import chess.SpecialMoves;
//import chess.Bishop;
//import chess.Knight;
//import chess.Pawn;
//
//import java.io.IOException;
//import java.util.HashMap;
//import java.util.Map;
//
//import org.eclipse.emf.common.util.URI;
//import org.eclipse.emf.ecore.EObject;
//import org.eclipse.emf.ecore.resource.Resource;
//import org.eclipse.emf.ecore.resource.ResourceSet;
//import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
//import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
//
//import chess.Board;
//
//public class ChessModelUtil {
//
//	public static Game createFirstChessGame() {
//		// Create Players
//        Player whitePlayer = createPlayer("White Player", PlayerColor.WHITE);
//        Player blackPlayer = createPlayer("Black Player", PlayerColor.BLACK);
//        
//        // Create Board
//        Board board = createBoard();
//        
//        // Create Special Moves
//        SpecialMoves specialMoves = createSpecialMoves();
//        
//        // Create Game instance
//        Game game = ChessFactory.eINSTANCE.createGame();
//        game.setState("Started");
//        game.setTurn(PlayerColor.WHITE); // White starts
//        game.getPlayers().add(whitePlayer);
//        game.getPlayers().add(blackPlayer);
//        game.setBoard(board);
//        game.setSpecialMoves(specialMoves);
//        
//        return game;
//    }
//
//    private static Player createPlayer(String name, PlayerColor color) {
//        Player player = ChessFactory.eINSTANCE.createPlayer();
//        player.setName(name);
//        player.setColor(color);
//        return player;
//    }
//
//    private static Board createBoard() {
//        Board board = ChessFactory.eINSTANCE.createBoard();
//        board.setRows(8);
//        board.setColumns(8);
//        createSquares(board);
//        return board;
//    }
//
//    private static void createSquares(Board board) {
//        for (int i = 0; i < 64; i++) {
//            Square square = ChessFactory.eINSTANCE.createSquare();
//            square.setFile(String.valueOf((char) ('A' + i % 8)));
//            square.setRank(i / 8 + 1);
//            square.setColor(i % 2 == 0 ? SquareColor.WHITE : SquareColor.BLACK);
//            
//            // Assuming squares is a List or EList, we can add directly
//            board.getSquares().add(square);
//        }
//    }
//    
//    private static SpecialMoves createSpecialMoves() {
//        SpecialMoves specialMoves = ChessFactory.eINSTANCE.createSpecialMoves();
//        specialMoves.setCastleQueensideWhite(false);
//        specialMoves.setCastleQueensideBlack(false);
//        specialMoves.setCastleKingsideWhite(false);
//        specialMoves.setCastleKingsideBlack(false);
//        return specialMoves;
//    }
//	
////        ChessFactory factory = ChessFactory.eINSTANCE;
////
////        Game game = factory.createGame();
////        game.setState("ongoing");
////        game.setTurn(PlayerColor.WHITE);
////
////        // Create players
////        Player player1 = factory.createPlayer();
////        player1.setName("Player 1");
////        player1.setColor(PlayerColor.WHITE);
////
////        Player player2 = factory.createPlayer();
////        player2.setName("Player 2");
////        player2.setColor(PlayerColor.BLACK);
////
////        game.getPlayers().add(player1);
////        game.getPlayers().add(player2);
////
////        // Create the board
////        Board board = factory.createBoard();
////        board.setRows(8);
////        board.setColumns(8);
////        game.setBoard(board);
////
////        // Add squares and pieces
////        addPiecesToBoard(factory, board, player1, player2);
////
////        return game;
////    }
////
////    // Create the second chess game instance
////    public static Game createSecondChessGame() {
////        ChessFactory factory = ChessFactory.eINSTANCE;
////
////        Game game = factory.createGame();
////        game.setState("ongoing");
////        game.setTurn(PlayerColor.BLACK);
////
////        // Create players
////        Player player3 = factory.createPlayer();
////        player3.setName("Player 3");
////        player3.setColor(PlayerColor.WHITE);
////
////        Player player4 = factory.createPlayer();
////        player4.setName("Player 4");
////        player4.setColor(PlayerColor.BLACK);
////
////        game.getPlayers().add(player3);
////        game.getPlayers().add(player4);
////
////        // Create the board
////        Board board = factory.createBoard();
////        board.setRows(8);
////        board.setColumns(8);
////        game.setBoard(board);
////
////        // Add squares and pieces
////        addPiecesToBoard(factory, board, player3, player4);
////
////        return game;
////    }
//
//    // Helper method to add pieces and squares to the board
//    private static void addPiecesToBoard(ChessFactory factory, Board board, Player whitePlayer, Player blackPlayer) {
//        for (int row = 1; row <= 8; row++) {
//            for (char file = 'a'; file <= 'h'; file++) {
//                Square square = factory.createSquare();
//                square.setFile(Character.toString(file));
//                square.setRank(row);
//                board.getSquares().add(square);  // Add the square to the board
//
//                // Add pieces to squares based on starting positions of a chess game
//                if (row == 1) { // White major pieces
//                    if (file == 'e') {
//                        King whiteKing = factory.createKing();
//                        whiteKing.setColor(PlayerColor.WHITE);
//                        whiteKing.setCurrentPosition(square);  // Set King on Square
//                        square.setPiece(whiteKing);  // Add King to Square (containment)
//                    } else if (file == 'd') {
//                        Queen whiteQueen = factory.createQueen();
//                        whiteQueen.setColor(PlayerColor.WHITE);
//                        whiteQueen.setCurrentPosition(square);  // Set Queen on Square
//                        square.setPiece(whiteQueen);  // Add Queen to Square (containment)
//                    }
//                    // Add more major pieces (Rook, Knight, Bishop)
//                } else if (row == 2) { // White pawns
//                    Pawn whitePawn = factory.createPawn();
//                    whitePawn.setColor(PlayerColor.WHITE);
//                    whitePawn.setCurrentPosition(square);  // Set Pawn on Square
//                    square.setPiece(whitePawn);  // Add Pawn to Square (containment)
//                } else if (row == 7) { // Black pawns
//                    Pawn blackPawn = factory.createPawn();
//                    blackPawn.setColor(PlayerColor.BLACK);
//                    blackPawn.setCurrentPosition(square);  // Set Pawn on Square
//                    square.setPiece(blackPawn);  // Add Pawn to Square (containment)
//                } else if (row == 8) { // Black major pieces
//                    if (file == 'e') {
//                        King blackKing = factory.createKing();
//                        blackKing.setColor(PlayerColor.BLACK);
//                        blackKing.setCurrentPosition(square);  // Set King on Square
//                        square.setPiece(blackKing);  // Add King to Square (containment)
//                    } else if (file == 'd') {
//                        Queen blackQueen = factory.createQueen();
//                        blackQueen.setColor(PlayerColor.BLACK);
//                        blackQueen.setCurrentPosition(square);  // Set Queen on Square
//                        square.setPiece(blackQueen);  // Add Queen to Square (containment)
//                    }
//                    // Add more major pieces (Rook, Knight, Bishop)
//                }
//            }
//        }
//    }
//
//
//
//
//
//
//    
//    public static void serializeModel(Game game, String filePath) {
//        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
//        Map<String, Object> m = reg.getExtensionToFactoryMap();
//        m.put("xmi", new XMIResourceFactoryImpl());
//
//        ResourceSet resSet = new ResourceSetImpl();
//        URI fileURI = URI.createFileURI(filePath);
//
//        Resource resource = resSet.createResource(fileURI);
//        resource.getContents().add(game);  // Ensure Game is added to the resource
////
////        // Collect all squares and pieces to add them correctly to the resource
////        List<EObject> objectsToAdd = new ArrayList<>();
////
////        Board board = game.getBoard();
////        if (board != null) {
////            // Add board to the resource
////            objectsToAdd.add(board);
////
////            // Collect all squares and their pieces
////            for (Square square : board.getSquares()) {
////                objectsToAdd.add(square);  // Add each Square
////
////                // Add the piece to the square and also add it to the resource
////                if (square.getPiece() != null) {
////                    // Set the current position of the piece to the square
////                    square.getPiece().setCurrentPosition(square);  
////                    objectsToAdd.add(square.getPiece());  // Add each Piece to the resource
////                }
////            }
////        }
//
//        // After iterating, add everything to the resource
////        resource.getContents().addAll(objectsToAdd);
//
//        try {
//            resource.save(new HashMap<>());
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }
//
//
//
//
//
//
//
//
//
//    
//    public static Game loadModel(String filePath) {
//        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
//        Map<String, Object> m = reg.getExtensionToFactoryMap();
//        m.put("xmi", new XMIResourceFactoryImpl());
//
//        ResourceSet resSet = new ResourceSetImpl();
//
//        URI fileURI = URI.createFileURI(filePath);
//
//        Resource resource = resSet.getResource(fileURI, true);
//
//        return (Game) resource.getContents().get(0);
//    }
//    
//    public static boolean validateModel(Game game) {
//        if (game.getPlayers().size() != 2) {
//            System.out.println("Validation failed: Game must have exactly two players.");
//            return false;
//        }
//
//        Board board = game.getBoard();
//        if (board == null || board.getRows() != 8 || board.getColumns() != 8) {
//            System.out.println("Validation failed: Game must have an 8x8 board.");
//            return false;
//        }
//
//        // Validate each square's piece (if any)
//        for (Square square : board.getSquares()) {
//            if (square.getPiece() != null) {
//                // Validate the piece (optional, depending on your game rules)
//                if (square.getPiece().getColor() == null) {
//                    System.out.println("Validation failed: Piece must have a color.");
//                    return false;
//                }
//            }
//        }
//
//        System.out.println("Model is valid.");
//        return true;
//    }
//
//    
//    
//}
//
